<?php

const SHERLOCK_MAIN_TABLE = 'sherlock_user_input'; //Here we will store searches (serialized user-filled forms and their values)
const SHERLOCK_TASKS_TABLE = 'sherlock_tasklist'; //Table for ACTIVE tasks
const SHERLOCK_RESULTS_TABLE = 'sherlock_results'; //Table for results. We will store only actual results here, deleting links to disappeared from fleamarket items.
const SHERLOCK_SEARCHNAME_HASH_ALGO = 'md5';

use Drupal\sherlock_d8\CoreClasses\Exceptions\InvalidInputData;
use Drupal\sherlock_d8\CoreClasses\SherlockEntity\SherlockEntity;
use Drupal\sherlock_d8\CoreClasses\SherlockTrouvailleEntity\SherlockTrouvailleEntity;

function sherlock_d8_theme($existing, $type, $theme, $path) {
  return [
    'display_results' => [
      'variables' => ['output_containers' => NULL,],
      'template' => 'sherlock-display-results', //Can't contain underscores! Template name is: sherlock-display-results.html.twig
      'file' => 'sherlock_d8.theme.inc',
    ],

    'display_queries' => [
      'variables' => ['constructed_urls_collection' => NULL,],
      'template' => 'sherlock-display-queries', //Can't contain underscores! Template name is: sherlock-display-queries.html.twig
      'file' => 'sherlock_d8.theme.inc',
    ],

    'scheduled_email_with_search_results' => [
      'variables' => [
        'user_name' => NULL,
        'markets_list' => NULL,
        'number_of_new' => NULL,
        'number_of_all' => NULL,
        'search_name' => NULL,
        'new_results' => NULL,
        'all_results' => NULL,
        'this_is_last_message' => NULL,
      ],
      'template' => 'search-results-mail-template',
      'file' => 'sherlock_d8.theme.inc',
    ],
  ];
}

//TODO: Maybe move all functionality from hook_cron to TaskManager class and call methods form it here?
//TODO; Or, add some methods to SherlockTaskEntity class to be able to clean up expired tasks.
/**
 * Implements hook_cron().
 */
function sherlock_d8_cron() {
  /**
   * @var \Drupal\sherlock_d8\CoreClasses\DatabaseManager\DatabaseManager $dbConnection
   */
  $dbConnection = \Drupal::service('sherlock_d8.database_manager');

  /**
   * @var \Psr\Log\LoggerInterface $logger
   */
  $logger = \Drupal::logger('sherlock_d8');

  $sherlockTrouvailleEntity = new SherlockTrouvailleEntity($dbConnection);

  //===================== FIRST STEP: REMOVE EXPIRED TASKS =============================================================
  //Prepare WHERE clause to select expired records from tasks table:
  $whereClause = [
    'active_to' => [
      'comparison_value' => time(),
      'comparison_op' => '<='
    ],
  ];

  $deletedTasksCount = 0;
  $updatedSearchesCount = 0;

  try {
    $recordsToDelete = $dbConnection->selectTable(SHERLOCK_TASKS_TABLE)->selectRecords($whereClause, 'id', FALSE);
    $idsToDelete = array_keys($recordsToDelete);

    /**
     * @var \Drupal\sherlock_d8\CoreClasses\SherlockEntity\SherlockTaskEntity $savedTaskObject
     */
    $savedTaskObject = SherlockEntity::getInstance('TASK', 0, $dbConnection);

    for ($i=0; $i < count($idsToDelete); $i++) {
      //Delete RESULTS for current task:
      $sherlockTrouvailleEntity->deleteByTaskID($idsToDelete[$i]);

      //Delete current task itself:
      $savedTaskObject->delete($idsToDelete[$i], TRUE);

      if (SherlockEntity::isTaskDeleted()) {
        $deletedTasksCount++;
      }

      if (SherlockEntity::isSearchUpdated()) {
        $updatedSearchesCount++;
      }

      SherlockEntity::resetFlags();
    }
  } catch (InvalidInputData $exception) {
    $problemFilePath = $exception->getFile();
    $lineNumber = $exception->getLine();
    $description = $exception->getMessage();

    $logger->error('Problem file: ' . $problemFilePath . '<br>' . 'Line number: ' . $lineNumber . '<br>' . 'Error description: ' . $description);

    unset($problemFilePath, $lineNumber, $description);
  }

  if ($deletedTasksCount > 0) {
    $logger->info('Automatically deleted [@num] expired tasks.', ['@num' => $deletedTasksCount]);
  }

  if ($deletedTasksCount !== $updatedSearchesCount) {
    $logger->notice('Consistency check needed: Number of deleted records from [' . SHERLOCK_TASKS_TABLE . '] not equal to number of updated records in [' . SHERLOCK_MAIN_TABLE . '].');
  }

  //===================== SECOND STEP: ADD ACTUAL TASKS TO QUEUE (if they was not processed during last 24h) ===========
  $queue = \Drupal::queue('pending_user_requests');

  //TODO: Upgrade my wrapper (DatabaseManager) to be able to do join(), so we will use only DatabaseManager here.
  $dbc = \Drupal::database();

  $getTasksQuery = $dbc->select(SHERLOCK_TASKS_TABLE, 'tt');
  $getTasksQuery->join(SHERLOCK_MAIN_TABLE, 'mt', 'tt.id = mt.task_id');
  $getTasksQuery->addField('tt', 'id', 'task_id');
  $getTasksQuery->addField('mt', 'uid', 'user_id');
  $getTasksQuery->condition('tt.last_checked', time() - 24*60*60, '<=');
  $result = $getTasksQuery->execute();

  foreach ($result as $record) {
    $queue->createItem(['user_id' => $record->user_id, 'task_id' => $record->task_id]);
  }
}

/**
 * Implements hook_mail()
 * @param string $key
 * @param array $message
 * @param array $params
 */
function sherlock_d8_mail(string $key, array &$message, array $params) {

  switch ($key) {
    case 'scheduled_task_completed':
      $message['headers']['Content-Type'] = $params['headers-content-type'];
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];

      break;
  }
}
